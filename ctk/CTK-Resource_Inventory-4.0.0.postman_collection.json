{
    "info": {
        "_postman_id": "6a74715a-77e8-42b8-b7a6-b504e7f0782a",
        "name": "CTK-Resource_Inventory-4.0.0",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "N1",
            "item": [
                {
                    "name": "/Resource",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "8c964f95-c701-4eb6-87fd-f7000a1b74ac",
                                "exec": [
                                    "var jsonData = pm.response.json();",
                                    "",
                                    "if (Array.isArray(jsonData)) { ",
                                    "  ",
                                    "    pm.test('Array not expected as response', function (){pm.expect.fail()});",
                                    "  ",
                                    "",
                                    "}",
                                    "",
                                    "pm.test(\"Status code is 201\", function () {",
                                    "  pm.response.to.have.status(201);",
                                    "});",
                                    "",
                                    "var instance = pm.response.json();",
                                    "var requiredAttributes = ['href', 'id', 'href', 'id', 'name', '@type'];",
                                    "",
                                    "pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "",
                                    "",
                                    "",
                                    "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "pm.test('Response has @type attribute', function() { pm.expect(instance[\"@type\"]).to.be.a('string'); });",
                                    "pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                                    "",
                                    "pm.globals.set('HREFRE01', instance['href']);",
                                    "pm.globals.set('IDRE01', instance['id']);",
                                    "pm.globals.set('NAMERE01', instance['name']);",
                                    "pm.globals.set('ATTYPERE01', instance['@type']);",
                                    "pm.test('Body includes value held on href', function () {",
                                    "  pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "});",
                                    "pm.test('Body includes value held on id', function () {",
                                    "  pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "});",
                                    "pm.test('Body includes value held on href', function () {",
                                    "  pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "});",
                                    "pm.test('Body includes value held on id', function () {",
                                    "  pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "});",
                                    "pm.test('Body includes value held on name', function () {",
                                    "  pm.expect(pm.response.text()).to.include(instance['name']);",
                                    "});",
                                    "pm.test('Body includes value held on @type', function () {",
                                    "  pm.expect(pm.response.text()).to.include(instance['@type']);",
                                    "});",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n  \"name\": \"RouterXX\"\n,\"@type\": \"Resource\"}"
                        },
                        "url": {
                            "raw": "{{Resource_Inventory}}resource",
                            "host": [
                                "{{Resource_Inventory}}resource"
                            ]
                        },
                        "description": "This operation creates a Resource"
                    },
                    "response": []
                },
                {
                    "name": "/Resource",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "f7315e2a-16ae-47f6-8a7a-f900f6133dab",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "  ",
                                    "  ",
                                    "  ",
                                    "var jsonData = pm.response.json();",
                                    "  ",
                                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                                    "    jsonData.forEach(function (instance, index) {",
                                    "      ",
                                    "        var requiredAttributes = ['href', 'id', 'href', 'id', 'name'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on name', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDRE01\")) {",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFRE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRE01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDRE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRE01');});",
                                    "            pm.test('name is ' + pm.globals.get(\"NAMERE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMERE01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDRE02\")) {",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFRE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRE02');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDRE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRE02');});",
                                    "            pm.test('name is ' + pm.globals.get(\"NAMERE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMERE02');});",
                                    "        }  ",
                                    "    });",
                                    "  }",
                                    "  else {",
                                    "    var instance = pm.response.json();",
                                    "    var requiredAttributes = ['href', 'id', 'href', 'id', 'name'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on name', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDRE01\")) {",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFRE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRE01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDRE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRE01');});",
                                    "            pm.test('name is ' + pm.globals.get(\"NAMERE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMERE01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDRE02\")) {",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFRE02\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRE02');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDRE02\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRE02');});",
                                    "            pm.test('name is ' + pm.globals.get(\"NAMERE02\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMERE02');});",
                                    "        }",
                                    "   ",
                                    "  }",
                                    "  ",
                                    "  "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{Resource_Inventory}}resource",
                            "host": [
                                "{{Resource_Inventory}}resource"
                            ]
                        },
                        "description": "This operation search for the created Resource"
                    },
                    "response": []
                },
                {
                    "name": "/Resource/{{IDRE01}}",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "c1d9558d-6383-42b0-8a77-ef87f869dc7b",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "  ",
                                    "  ",
                                    "  ",
                                    "var jsonData = pm.response.json();",
                                    "  ",
                                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                                    "    jsonData.forEach(function (instance, index) {",
                                    "      ",
                                    "        var requiredAttributes = ['href', 'id', 'href', 'id', 'name'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on name', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDRE01\")) {",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFRE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRE01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDRE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRE01');});",
                                    "            pm.test('name is ' + pm.globals.get(\"NAMERE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMERE01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDRE02\")) {",
                                    "            pm.test('IDRE02 not expected on this test', function () {",
                                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                                    "            });",
                                    "        }",
                                    "          ",
                                    "    });",
                                    "  }",
                                    "  else {",
                                    "    var instance = pm.response.json();",
                                    "    var requiredAttributes = ['href', 'id', 'href', 'id', 'name'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on name', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDRE01\")) {",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFRE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRE01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDRE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRE01');});",
                                    "            pm.test('name is ' + pm.globals.get(\"NAMERE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMERE01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDRE02\")) {",
                                    "            pm.test('IDRE02 not expected on this test', function () {",
                                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                                    "            });",
                                    "        }",
                                    "",
                                    "        ",
                                    "   ",
                                    "}",
                                    "  ",
                                    "  "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{Resource_Inventory}}resource/{{IDRE01}}",
                            "host": [
                                "{{Resource_Inventory}}resource"
                            ],
                            "path": [
                                "{{IDRE01}}"
                            ]
                        },
                        "description": "This operation search for one of the created Resource"
                    },
                    "response": []
                }
            ],
            "protocolProfileBehavior": {}
        },
        {
            "name": "N2",
            "item": [
                {
                    "name": "/Resource?fields=href",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "ea14ffb4-587b-4ec0-95be-a774c21e2c06",
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{Resource_Inventory}}resource?fields=href",
                            "host": [
                                "{{Resource_Inventory}}resource"
                            ],
                            "query": [
                                {
                                    "key": "fields",
                                    "value": "href"
                                }
                            ]
                        },
                        "description": "This operation filters a Resource"
                    },
                    "response": []
                },
                {
                    "name": "/Resource?fields=id",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "27bea3bf-ab57-44e2-9264-7b1b9395afb6",
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{Resource_Inventory}}resource?fields=id",
                            "host": [
                                "{{Resource_Inventory}}resource"
                            ],
                            "query": [
                                {
                                    "key": "fields",
                                    "value": "id"
                                }
                            ]
                        },
                        "description": "This operation filters a Resource"
                    },
                    "response": []
                },
                {
                    "name": "/Resource?fields=href",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "34959a90-16e4-4989-be0c-430b40e025d6",
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{Resource_Inventory}}resource?fields=href",
                            "host": [
                                "{{Resource_Inventory}}resource"
                            ],
                            "query": [
                                {
                                    "key": "fields",
                                    "value": "href"
                                }
                            ]
                        },
                        "description": "This operation filters a Resource"
                    },
                    "response": []
                },
                {
                    "name": "/Resource?fields=id",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "a866af79-a81f-4464-8a70-b718642d703c",
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{Resource_Inventory}}resource?fields=id",
                            "host": [
                                "{{Resource_Inventory}}resource"
                            ],
                            "query": [
                                {
                                    "key": "fields",
                                    "value": "id"
                                }
                            ]
                        },
                        "description": "This operation filters a Resource"
                    },
                    "response": []
                },
                {
                    "name": "/Resource?fields=name",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "bd26b802-e159-4edf-a7d5-fa9aa2fa6bf5",
                                "exec": [
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{Resource_Inventory}}resource?fields=name",
                            "host": [
                                "{{Resource_Inventory}}resource"
                            ],
                            "query": [
                                {
                                    "key": "fields",
                                    "value": "name"
                                }
                            ]
                        },
                        "description": "This operation filters a Resource"
                    },
                    "response": []
                },
                {
                    "name": "/Resource?name={{NAMERE01}}",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "de8540d4-f9cf-45a2-a1a9-819b1bae562d",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "  ",
                                    "  ",
                                    "  ",
                                    "var jsonData = pm.response.json();",
                                    "  ",
                                    "if (Array.isArray(jsonData) && (jsonData.length > 0)) {",
                                    "    jsonData.forEach(function (instance, index) {",
                                    "      ",
                                    "        var requiredAttributes = ['href', 'id', 'href', 'id', 'name'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on name', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDRE01\")) {",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFRE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRE01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDRE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRE01');});",
                                    "            pm.test('name is ' + pm.globals.get(\"NAMERE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMERE01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDRE02\")) {",
                                    "            pm.test('IDRE02 not expected on this test', function () {",
                                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                                    "            });",
                                    "        }",
                                    "          ",
                                    "    });",
                                    "  }",
                                    "  else {",
                                    "    var instance = pm.response.json();",
                                    "    var requiredAttributes = ['href', 'id', 'href', 'id', 'name'];",
                                    "      ",
                                    "        pm.test('Instance has all mandatory attributes', function () { pm.expect(Object.keys(instance)).to.include.members(requiredAttributes) });",
                                    "      ",
                                    "      ",
                                    "      ",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has href attribute', function() { pm.expect(instance[\"href\"]).to.be.a('string'); });",
                                    "        pm.test('Response has id attribute', function() { pm.expect(instance[\"id\"]).to.be.a('string'); });",
                                    "        pm.test('Response has name attribute', function() { pm.expect(instance[\"name\"]).to.be.a('string'); });",
                                    "      ",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on href', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['href']);",
                                    "        });",
                                    "        pm.test('Body includes value held on id', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['id']);",
                                    "        });",
                                    "        pm.test('Body includes value held on name', function () {",
                                    "            pm.expect(pm.response.text()).to.include(instance['name']);",
                                    "        });",
                                    "        // Individualized tests",
                                    "        if (instance.id == pm.globals.get(\"IDRE01\")) {",
                                    "            pm.test('href is ' + pm.globals.get(\"HREFRE01\"), function() {pm.expect(instance['href']) == pm.globals.get('HREFRE01');});",
                                    "            pm.test('id is ' + pm.globals.get(\"IDRE01\"), function() {pm.expect(instance['id']) == pm.globals.get('IDRE01');});",
                                    "            pm.test('name is ' + pm.globals.get(\"NAMERE01\"), function() {pm.expect(instance['name']) == pm.globals.get('NAMERE01');});",
                                    "        }",
                                    "        if (instance.id == pm.globals.get(\"IDRE02\")) {",
                                    "            pm.test('IDRE02 not expected on this test', function () {",
                                    "                console.log(\"Non expected resource, may happen if there is a collision on attributes\")",
                                    "            });",
                                    "        }",
                                    "",
                                    "        ",
                                    "   ",
                                    "}",
                                    "  ",
                                    "  "
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{Resource_Inventory}}resource?name={{NAMERE01}}",
                            "host": [
                                "{{Resource_Inventory}}resource"
                            ],
                            "query": [
                                {
                                    "key": "name",
                                    "value": "{{NAMERE01}}"
                                }
                            ]
                        },
                        "description": "This operation filters a Resource"
                    },
                    "response": []
                }
            ],
            "protocolProfileBehavior": {}
        },
        {
            "name": "E1",
            "item": [
                {
                    "name": "/Resource/404ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "id": "92f35539-d451-459a-898d-586bf35e7400",
                                "exec": [
                                    "pm.test(\"Status code is 404\", function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});",
                                    "",
                                    ""
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Accept",
                                "value": "application/json"
                            },
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "url": {
                            "raw": "{{Resource_Inventory}}resource/907d9939-c640-438a-8461-a6bd53924214",
                            "host": [
                                "{{Resource_Inventory}}resource"
                            ],
                            "path": [
                                "907d9939-c640-438a-8461-a6bd53924214"
                            ]
                        },
                        "description": "This operation search for one of the created Resource"
                    },
                    "response": []
                }
            ],
            "protocolProfileBehavior": {}
        }
    ],
    "protocolProfileBehavior": {}
}